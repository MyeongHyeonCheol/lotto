import React, { useState } from 'react';
import './App.module.css';

function App() {
  const [myNumbers, setMyNumbers] = useState([]);
  const [manualSelection, setManualSelection] = useState([]);
  const [winningNumbers, setWinningNumbers] = useState([]);
  const [bonusNumber, setBonusNumber] = useState(null);
  const [mode, setMode] = useState('');
  const min = 1;
  const max = 45;

  const generateUniqueNumbers = (count, exclude = []) => {
    const numbers = [];
    while (numbers.length < count) {
      const randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;
      if (!numbers.includes(randomNumber) && !exclude.includes(randomNumber)) {
        numbers.push(randomNumber);
      }
    }
    return numbers;
  };

  const getWinningNumbers = () => {
    const mainNumbers = generateUniqueNumbers(6);
    setWinningNumbers(mainNumbers);
    const bonus = generateUniqueNumbers(1, mainNumbers)[0];
    setBonusNumber(bonus);
  };

  const getMyNumbers = () => {
    const myNums = generateUniqueNumbers(6);
    setMyNumbers(myNums);
  };

  const getResultMessage = () => {
    if (myNumbers.length !== 6 || winningNumbers.length !== 6) {
      return null;
    }
    const matchCount = myNumbers.filter(num => winningNumbers.includes(num)).length;
    const hasBonus = myNumbers.includes(bonusNumber);

    if (matchCount === 6) return '🎉 축하합니다! 1등입니다! 🎉';
    if (matchCount === 5 && hasBonus) return '🥳 축하합니다! 2등입니다!';
    if (matchCount === 5) return '🎊 축하합니다! 3등입니다!';
    if (matchCount === 4) return '🎉 축하합니다! 4등입니다!';
    if (matchCount === 3) return '👏 축하합니다! 5등입니다!';
    return '😢 아쉽지만 다음 기회에!';
  };

  const handleManualSelect = (num) => {
    if (manualSelection.includes(num) || manualSelection.length >= 6) return;
    const updated = [...manualSelection, num];
    setManualSelection(updated);
    if (mode === 'manual' && updated.length === 6) setMyNumbers(updated);
  };

  const fillRemainingForSemiAuto = () => {
    if (manualSelection.length === 0) return alert('먼저 번호를 선택해주세요!');
    const remainingCount = 6 - manualSelection.length;
    const autoGenerated = generateUniqueNumbers(remainingCount, manualSelection);
    const finalNumbers = [...manualSelection, ...autoGenerated];
    setMyNumbers(finalNumbers);
  };

  const resetManual = () => {
    setManualSelection([]);
    setMyNumbers([]);
  };

  return (
    <div className="container">
      <h1 className="title">🎰 LOTTO SIMULATION 🎰</h1>
      <hr />

      <div className="section">
        <label>방식을 선택해주세요!
          <select
            className="dropdown"
            value={mode}
            onChange={(e) => {
              setMode(e.target.value);
              resetManual();
            }}
          >
            <option value="auto">자동</option>
            <option value="manual">수동</option>
            <option value="semi">반자동</option>
          </select>
        </label>
      </div>

      <div className="section">
        <h2>내 번호</h2>
        <div className="numbers">{myNumbers.join(', ')}</div>

        {mode === 'auto' && <button className="button" onClick={getMyNumbers}>번호 생성</button>}

        {(mode === 'manual' || mode === 'semi') && (
          <div>
            <div className="number-grid">
              {Array.from({ length: max }, (_, i) => i + 1).map(num => (
                <button
                  key={num}
                  onClick={() => handleManualSelect(num)}
                  disabled={manualSelection.includes(num)}
                  className={`number-button ${manualSelection.includes(num) ? 'selected' : ''}`}
                >
                  {num}
                </button>
              ))}
            </div>

            <div>선택한 번호: {manualSelection.join(', ')}</div>

            {mode === 'manual' && manualSelection.length === 6 && (
              <div className="complete">✅ 번호 선택 완료!</div>
            )}

            {mode === 'semi' && (
              <button 
                className="button" 
                onClick={fillRemainingForSemiAuto} 
                disabled={manualSelection.length > 6}
              >
                번호 생성
              </button>
            )}
          </div>
        )}
      </div>

      <div className="section">
        <h2>당첨 번호</h2>
        <div className="numbers">{winningNumbers.join(', ')}</div>
        <div className="bonus">보너스 번호: {bonusNumber !== null ? bonusNumber : '-'}</div>
        <button className="button" onClick={getWinningNumbers}>추첨 시작!</button>
      </div>

      <div className="section">
        <h2>결과</h2>
        <div>
          {myNumbers.length > 0 && winningNumbers.length > 0
            ? `당첨된 번호: ${myNumbers.filter(num => winningNumbers.includes(num)).join(', ')}`
            : '번호를 생성해주세요!'}
        </div>
        <div className="result-message">{getResultMessage()}</div>
      </div>
    </div>
  );
}

export default App;
